function fetchIssues () { // Retrieves issues from the local storage. 
	var issues = JSON.parse(localStorage.getItem('issues'));
	var issuesList = document.getElementById('issuesList');
	issuesList.innerHTML = '';
	for (var i = 0; i < issues.length; i++) {
	    // The necessary details are gathered and stored in variables to print the output.
		var id = issues[i].id;
		var desc = issues[i].description;
		var severity = issues[i].severity;
		var assignedTo = issues[i].assignedTo;
		var status = issues[i].status;
	   
	   // Adding the HTML output for that element to issuesList.innerHTML
		issuesList.innerHTML += '<div class="well">' + '<h6>Issue ID: ' + id + '</h6>' + '<p><span class="label label-info">' + status + '</span></p>' + '<h3>' + desc + '</h3>' + '<p><span class="glyphicon glyphicon-time"></span> ' + severity + ' ' + '<span class="glyphicon glyphicon-user"></span> ' + assignedTo + '</p>' + '<a href="#" class="btn btn-warning" onclick="setStatusClosed(\''+id+'\')">Close</a> ' + '<a href="#" class="btn btn-danger" onclick="deleteIssue(\''+id+'\')">Delete</a>' + '</div>';
	}
}

document.getElementById('issueInputForm').addEventListener('submit', saveIssue); // To submit the form and save details.

function saveIssue(e) {  // Stores the input in the browser's local storage when "Add" button is clicked.
	var issueId = chance.guid();  // Issue ID is generated by calling function chance.guid().
	var issueDesc = document.getElementById('issueDescInput').value;
	var issueSeverity = document.getElementById('issueSeverityInput').value;
	var issueAssignedTo = document.getElementById('issueAssignedToInput').value;
	var issueStatus = 'Open'; //Issue status is set to "Open".
	var issue = {
			id: issueId,
			description: issueDesc,
			severity: issueSeverity,
			assignedTo: issueAssignedTo,
			status: issueStatus
		    }  // The inputs from the form are stored in an object. 
	if (localStorage.getItem('issues') === null) { 
	
		var issues = [];
		issues.push(issue);
		localStorage.setItem('issues', JSON.stringify(issues));
	} else {
	
		var issues = JSON.parse(localStorage.getItem('issues'));
		issues.push(issue);
		localStorage.setItem('issues', JSON.stringify(issues));
	}
	document.getElementById('issueInputForm').reset(); //The form is reset (all the input fields are cleared and the listbox is set to default value) to add the next issue.
	fetchIssues();  // To make sure that the list output is re-generated and that the new issue item will be visible. 
	e.preventDefault(); //Prevents the default submission of the form is taking place.
}

function setStatusClosed (id) {  // Closes a particular issue and set the status from "Open" to "Close" and the change is made visible on the user interface. The same is stored in the browser's local storage too.
	var issues = JSON.parse(localStorage.getItem('issues'));  // Gets the issue to be closed from the browser's local storage.
	for(var i = 0; i < issues.length; i++) {
		if (issues[i].id == id) {
			issues[i].status = "Closed";
		}
	}  The issue to be closed is searched and closed.
	localStorage.setItem('issues', JSON.stringify(issues)); // Converting a JavaScript object into a string and stored in the browser's local storage.
	fetchIssues(); // To make sure that the list output is re-generated and that the new issue item will be visible.
}  

function deleteIssue (id) {  // Deletes a particular issue from the application. The change is made visible on the user interface. The same is stored in the browser's local storage too.
	var issues = JSON.parse(localStorage.getItem('issues')); // Gets the issue to be deleted from the browser's local storage.
	for(var i = 0; i < issues.length; i++) {
		if (issues[i].id == id) {
			issues.splice(i, 1);
		} 
	}  // The issue to be deleted is searched and removed from the storage.
	localStorage.setItem('issues', JSON.stringify(issues)); // Converting a JavaScript object into a string and stored in the browser's local storage.
	fetchIssues(); // To make sure that the list output is re-generated and that the new issue item will be visible.
}